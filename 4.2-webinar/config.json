{
  "productInfo" : {
    "company" : "HighByte",
    "product" : "IntelligenceHub",
    "version" : "4.2.0",
    "build" : "2025.6.27.332",
    "stage" : "Release"
  },
  "project" : {
    "version" : 11,
    "connections" : [ {
      "name" : "ignition",
      "uri" : "inductive.ignition://host.docker.internal:45280",
      "tags" : [ ],
      "writes" : {
        "flattenModeledValues" : false
      },
      "subscriptions" : { },
      "storeForward" : {
        "enabled" : false,
        "maxEntries" : 100,
        "waitOnFailureInterval" : {
          "duration" : 1,
          "units" : "Seconds"
        }
      },
      "settings" : {
        "connectTimeoutSeconds" : 5,
        "requestTimeoutMS" : 30000,
        "compression" : "GZIP"
      }
    }, {
      "name" : "opc",
      "uri" : "opc.tcp://host.docker.internal:49320",
      "tags" : [ ],
      "writes" : {
        "flattenModeledValues" : false
      },
      "subscriptions" : {
        "subscriptionRate" : {
          "duration" : 1,
          "units" : "Seconds"
        }
      },
      "storeForward" : {
        "enabled" : false,
        "maxEntries" : 100,
        "waitOnFailureInterval" : {
          "duration" : 1,
          "units" : "Seconds"
        }
      },
      "settings" : {
        "security" : "None",
        "authentication" : {
          "type" : "Anonymous"
        },
        "connectTimeoutSeconds" : 5,
        "requestTimeoutMS" : 5000,
        "maxItemsPerRead" : 512,
        "maxItemsPerWrite" : 256,
        "sessionName" : ""
      }
    }, {
      "name" : "openAI",
      "uri" : "openai.ai://openAI",
      "tags" : [ ],
      "writes" : {
        "flattenModeledValues" : false
      },
      "subscriptions" : { },
      "storeForward" : {
        "enabled" : false,
        "maxEntries" : 100,
        "waitOnFailureInterval" : {
          "duration" : 1,
          "units" : "Seconds"
        }
      },
      "settings" : {
      }
    }, {
      "name" : "osisoft",
      "uri" : "osisoft.afsdk://host.docker.internal:45290",
      "tags" : [ ],
      "writes" : {
        "flattenModeledValues" : false
      },
      "subscriptions" : { },
      "storeForward" : {
        "enabled" : false,
        "maxEntries" : 100,
        "waitOnFailureInterval" : {
          "duration" : 1,
          "units" : "Seconds"
        }
      },
      "settings" : {
        "connectTimeoutSeconds" : 5,
        "requestTimeoutMS" : 30000,
        "compression" : "NONE",
        "auth" : {
          "type" : "credentials",
          "username" : "osisoft"
        }
      }
    }, {
      "name" : "uns",
      "uri" : "mqtt://127.0.0.1:1885",
      "tags" : [ ],
      "writes" : {
        "flattenModeledValues" : false
      },
      "subscriptions" : { },
      "storeForward" : {
        "enabled" : false,
        "maxEntries" : 100,
        "waitOnFailureInterval" : {
          "duration" : 1,
          "units" : "Seconds"
        }
      },
      "settings" : {
        "connectionTimeoutSeconds" : 10,
        "keepAliveSeconds" : 60,
        "requestTimeoutMS" : 5000,
        "maxInflight" : 1000,
        "cleanSession" : true,
        "ssl" : false,
        "redundantBrokers" : [ ],
        "inputDiscovery" : ""
      }
    } ],
    "conditions" : [ {
      "name" : "fiveMinAvg",
      "uri" : "condition.aggregate",
      "tags" : [ ],
      "settings" : {
        "scanInterval" : {
          "units" : "Seconds",
          "duration" : 1
        },
        "storageInterval" : {
          "units" : "Minutes",
          "duration" : 10
        },
        "window" : {
          "type" : "sliding",
          "windowInterval" : {
            "units" : "Minutes",
            "duration" : 1
          }
        },
        "enabled" : false,
        "inReferences" : [ "{{Instance.crusher}}" ]
      }
    } ],
    "inputs" : [ {
      "name" : "browse",
      "connection" : "ignition",
      "type" : "inductive.ignition",
      "qualifier" : {
        "type" : "path",
        "tagAddress" : "[default]"
      },
      "cacheLifetime" : {
        "enabled" : false
      },
      "template" : {
        "type" : "Off"
      },
      "parameters" : {
        "type" : "EmptyParameters"
      }
    }, {
      "name" : "read",
      "connection" : "ignition",
      "type" : "inductive.ignition",
      "qualifier" : {
        "type" : "path",
        "tagAddress" : "[default]{{this.path}}"
      },
      "cacheLifetime" : {
        "enabled" : false
      },
      "template" : {
        "type" : "Off"
      },
      "parameters" : {
        "type" : "inline",
        "model" : {
          "name" : "params",
          "tags" : [ ],
          "attributes" : [ {
            "attributeType" : "Internal",
            "name" : "path",
            "nullable" : false,
            "required" : false,
            "array" : false,
            "internalType" : "String"
          } ]
        }
      }
    }, {
      "name" : "FertilizerDemo_Line1",
      "connection" : "opc",
      "type" : "opc.tcp",
      "qualifier" : {
        "namespaceIndex" : 2,
        "identifierType" : "String",
        "identifier" : "FertilizerDemo.Line1",
        "dataType" : "Auto",
        "type" : "Branch",
        "cacheInterval" : {
          "duration" : 1,
          "units" : "Hours"
        },
        "ignoreBadQuality" : false,
        "browseVariableNodes" : false,
        "maxDepth" : 10
      },
      "cacheLifetime" : {
        "enabled" : false
      },
      "template" : {
        "type" : "Off"
      },
      "parameters" : {
        "type" : "EmptyParameters"
      }
    }, {
      "name" : "browse",
      "connection" : "opc",
      "type" : "opc.tcp",
      "qualifier" : {
        "namespaceIndex" : 2,
        "identifierType" : "String",
        "identifier" : "FertilizerDemo",
        "dataType" : "Auto",
        "type" : "Branch",
        "maxDepth" : 10,
        "cacheInterval" : {
          "duration" : 1,
          "units" : "Hours"
        },
        "ignoreBadQuality" : false,
        "browseVariableNodes" : false,
        "isComplex" : true
      },
      "cacheLifetime" : {
        "enabled" : false
      },
      "template" : {
        "type" : "Off"
      },
      "parameters" : {
        "type" : "EmptyParameters"
      }
    }, {
      "name" : "read",
      "connection" : "opc",
      "type" : "opc.tcp",
      "qualifier" : {
        "type" : "Tag",
        "identifierType" : "String",
        "samplingInterval" : {
          "duration" : 0,
          "units" : "Seconds"
        },
        "namespaceIndex" : "2",
        "identifier" : "{{this.tag}}"
      },
      "cacheLifetime" : {
        "enabled" : false
      },
      "template" : {
        "type" : "Off"
      },
      "parameters" : {
        "type" : "inline",
        "model" : {
          "name" : "params",
          "tags" : [ ],
          "attributes" : [ {
            "attributeType" : "Internal",
            "name" : "tag",
            "nullable" : false,
            "required" : false,
            "array" : false,
            "internalType" : "String"
          } ]
        }
      }
    }, {
      "name" : "rootInstanceGeneration",
      "connection" : "opc",
      "type" : "opc.tcp",
      "qualifier" : {
        "namespaceIndex" : 2,
        "identifierType" : "String",
        "identifier" : "FertilizerDemo",
        "dataType" : "Auto",
        "type" : "Branch",
        "maxDepth" : 10,
        "cacheInterval" : {
          "duration" : 1,
          "units" : "Hours"
        },
        "ignoreBadQuality" : false,
        "browseVariableNodes" : false,
        "isComplex" : false
      },
      "cacheLifetime" : {
        "enabled" : false
      },
      "template" : {
        "type" : "Off"
      },
      "parameters" : {
        "type" : "EmptyParameters"
      }
    }, {
      "name" : "gpt4",
      "connection" : "openAI",
      "type" : "openai.ai",
      "qualifier" : {
        "modelType" : "gpt-4",
        "responseFormat" : "string"
      },
      "cacheLifetime" : {
        "enabled" : false
      },
      "template" : {
        "type" : "Off"
      },
      "parameters" : {
        "type" : "EmptyParameters"
      }
    }, {
      "name" : "browse",
      "connection" : "osisoft",
      "type" : "osisoft.afsdk",
      "qualifier" : {
        "type" : "pointbrowse",
        "options" : {
          "database" : "FertilizerPlant",
          "get" : "currentValue",
          "index" : false,
          "includeMetaData" : false,
          "includeChildren" : false,
          "indexWindow" : "",
          "query" : "Line1*"
        }
      },
      "cacheLifetime" : {
        "enabled" : false
      },
      "template" : {
        "type" : "Off"
      },
      "parameters" : {
        "type" : "EmptyParameters"
      }
    }, {
      "name" : "read",
      "connection" : "osisoft",
      "type" : "osisoft.afsdk",
      "qualifier" : {
        "type" : "point",
        "options" : {
          "get" : "rawValues",
          "includeMetaData" : false,
          "includeChildren" : true,
          "useReference" : true,
          "points" : [ ],
          "query" : "",
          "index" : false,
          "indexWindow" : "",
          "reference" : "{{this.points}}",
          "boundaryType" : "inside",
          "startTime" : "*-{{this.timeInMinutes}}m",
          "endTime" : "*"
        }
      },
      "cacheLifetime" : {
        "enabled" : false
      },
      "template" : {
        "type" : "Off"
      },
      "parameters" : {
        "type" : "inline",
        "model" : {
          "name" : "params",
          "tags" : [ ],
          "attributes" : [ {
            "attributeType" : "Internal",
            "name" : "points",
            "nullable" : false,
            "required" : false,
            "array" : false,
            "internalType" : "String"
          }, {
            "attributeType" : "Internal",
            "name" : "timeInMinutes",
            "nullable" : false,
            "required" : false,
            "array" : false,
            "internalType" : "String"
          } ]
        }
      }
    }, {
      "name" : "readAggregate",
      "connection" : "osisoft",
      "type" : "osisoft.afsdk",
      "qualifier" : {
        "type" : "point",
        "options" : {
          "get" : "average",
          "includeMetaData" : false,
          "includeChildren" : true,
          "useReference" : true,
          "points" : [ ],
          "query" : "",
          "index" : false,
          "indexWindow" : "",
          "reference" : "{{this.points}}",
          "boundaryType" : "inside",
          "startTime" : "*-{{this.timeInMinutes}}m",
          "calcBasis" : "timeWeighted",
          "endTime" : "*"
        }
      },
      "cacheLifetime" : {
        "enabled" : false
      },
      "template" : {
        "type" : "Off"
      },
      "parameters" : {
        "type" : "inline",
        "model" : {
          "name" : "params",
          "tags" : [ ],
          "attributes" : [ {
            "attributeType" : "Internal",
            "name" : "points",
            "nullable" : false,
            "required" : false,
            "array" : false,
            "internalType" : "String"
          }, {
            "attributeType" : "Internal",
            "name" : "timeInMinutes",
            "nullable" : false,
            "required" : false,
            "array" : false,
            "internalType" : "String"
          } ]
        }
      }
    }, {
      "name" : "readMetadata",
      "connection" : "osisoft",
      "type" : "osisoft.afsdk",
      "qualifier" : {
        "type" : "point",
        "options" : {
          "get" : "currentValue",
          "includeMetaData" : true,
          "includeChildren" : true,
          "useReference" : true,
          "points" : [ ],
          "query" : "",
          "index" : false,
          "indexWindow" : "",
          "reference" : "{{this.points}}",
          "boundaryType" : "inside",
          "startTime" : "*",
          "endTime" : "-{{this.timeInSeconds}}"
        }
      },
      "cacheLifetime" : {
        "enabled" : false
      },
      "template" : {
        "type" : "Off"
      },
      "parameters" : {
        "type" : "inline",
        "model" : {
          "name" : "params",
          "tags" : [ ],
          "attributes" : [ {
            "attributeType" : "Internal",
            "name" : "points",
            "nullable" : false,
            "required" : false,
            "array" : false,
            "internalType" : "String"
          } ]
        }
      }
    }, {
      "name" : "browse",
      "connection" : "uns",
      "type" : "mqtt",
      "qualifier" : {
        "inputType" : "Branch",
        "payloadType" : "json",
        "qos" : 0,
        "topic" : "#",
        "includeTopic" : true
      },
      "cacheLifetime" : {
        "enabled" : false
      },
      "template" : {
        "type" : "Off"
      },
      "parameters" : {
        "type" : "EmptyParameters"
      }
    }, {
      "name" : "read",
      "connection" : "uns",
      "type" : "mqtt",
      "qualifier" : {
        "inputType" : "LastPublish",
        "payloadType" : "json",
        "qos" : 0,
        "topic" : "{{this.topic}}"
      },
      "cacheLifetime" : {
        "enabled" : false
      },
      "template" : {
        "type" : "Off"
      },
      "parameters" : {
        "type" : "inline",
        "model" : {
          "name" : "params",
          "tags" : [ ],
          "attributes" : [ {
            "attributeType" : "Internal",
            "name" : "topic",
            "nullable" : false,
            "required" : false,
            "array" : false,
            "internalType" : "String"
          } ]
        }
      }
    } ],
    "outputs" : [ ],
    "modeling" : {
      "models" : [ {
        "name" : "Crusher",
        "tags" : [ ],
        "attributes" : [ {
          "attributeType" : "Internal",
          "name" : "feedRate",
          "nullable" : false,
          "required" : false,
          "array" : false,
          "internalType" : "Real64"
        }, {
          "attributeType" : "Internal",
          "name" : "powerKW",
          "nullable" : false,
          "required" : false,
          "array" : false,
          "internalType" : "Real64"
        }, {
          "attributeType" : "Internal",
          "name" : "rpm",
          "nullable" : false,
          "required" : false,
          "array" : false,
          "internalType" : "Int32"
        }, {
          "attributeType" : "Internal",
          "name" : "vibration",
          "nullable" : false,
          "required" : false,
          "array" : false,
          "internalType" : "Real64"
        }, {
          "attributeType" : "Internal",
          "name" : "temperature",
          "nullable" : false,
          "required" : false,
          "array" : false,
          "internalType" : "Real64"
        }, {
          "attributeType" : "Internal",
          "name" : "status",
          "nullable" : false,
          "required" : false,
          "array" : false,
          "internalType" : "Boolean"
        }, {
          "attributeType" : "Internal",
          "name" : "crushRate",
          "nullable" : false,
          "required" : false,
          "array" : false,
          "internalType" : "Int32"
        } ]
      }, {
        "name" : "DrumDryer",
        "tags" : [ ],
        "attributes" : [ {
          "attributeType" : "Internal",
          "name" : "inletMoisture",
          "nullable" : false,
          "required" : false,
          "array" : false,
          "internalType" : "Real64"
        }, {
          "attributeType" : "Internal",
          "name" : "outletMoisture",
          "nullable" : false,
          "required" : false,
          "array" : false,
          "internalType" : "Real64"
        }, {
          "attributeType" : "Internal",
          "name" : "dryingTimeSeconds",
          "nullable" : false,
          "required" : false,
          "array" : false,
          "internalType" : "Int32"
        }, {
          "attributeType" : "Internal",
          "name" : "flowRate",
          "nullable" : false,
          "required" : false,
          "array" : false,
          "internalType" : "Real64"
        }, {
          "attributeType" : "Internal",
          "name" : "airFlow",
          "nullable" : false,
          "required" : false,
          "array" : false,
          "internalType" : "Real64"
        }, {
          "attributeType" : "Internal",
          "name" : "rpm",
          "nullable" : false,
          "required" : false,
          "array" : false,
          "internalType" : "Int32"
        }, {
          "attributeType" : "Internal",
          "name" : "pressure",
          "nullable" : false,
          "required" : false,
          "array" : false,
          "internalType" : "Real64"
        }, {
          "attributeType" : "Internal",
          "name" : "power",
          "nullable" : false,
          "required" : false,
          "array" : false,
          "internalType" : "Real64"
        }, {
          "attributeType" : "Internal",
          "name" : "temperature",
          "nullable" : false,
          "required" : false,
          "array" : false,
          "internalType" : "Real64"
        }, {
          "attributeType" : "Internal",
          "name" : "status",
          "nullable" : false,
          "required" : false,
          "array" : false,
          "internalType" : "Boolean"
        } ]
      }, {
        "name" : "Granulator",
        "tags" : [ ],
        "attributes" : [ {
          "attributeType" : "Internal",
          "name" : "moisture",
          "nullable" : false,
          "required" : false,
          "array" : false,
          "internalType" : "Real64"
        }, {
          "attributeType" : "Internal",
          "name" : "binderRate",
          "nullable" : false,
          "required" : false,
          "array" : false,
          "internalType" : "Real64"
        }, {
          "attributeType" : "Internal",
          "name" : "sprayRate",
          "nullable" : false,
          "required" : false,
          "array" : false,
          "internalType" : "Real64"
        }, {
          "attributeType" : "Internal",
          "name" : "rpm",
          "nullable" : false,
          "required" : false,
          "array" : false,
          "internalType" : "Int32"
        }, {
          "attributeType" : "Internal",
          "name" : "pressure",
          "nullable" : false,
          "required" : false,
          "array" : false,
          "internalType" : "Real64"
        }, {
          "attributeType" : "Internal",
          "name" : "power",
          "nullable" : false,
          "required" : false,
          "array" : false,
          "internalType" : "Real64"
        }, {
          "attributeType" : "Internal",
          "name" : "temperature",
          "nullable" : false,
          "required" : false,
          "array" : false,
          "internalType" : "Real64"
        }, {
          "attributeType" : "Internal",
          "name" : "status",
          "nullable" : false,
          "required" : false,
          "array" : false,
          "internalType" : "Boolean"
        } ]
      }, {
        "name" : "Mixer",
        "tags" : [ ],
        "attributes" : [ {
          "attributeType" : "Internal",
          "name" : "mixingTime",
          "nullable" : false,
          "required" : false,
          "array" : false,
          "internalType" : "Int32"
        }, {
          "attributeType" : "Internal",
          "name" : "rpms",
          "nullable" : false,
          "required" : false,
          "array" : false,
          "internalType" : "Int32"
        }, {
          "attributeType" : "Internal",
          "name" : "feedRate",
          "nullable" : false,
          "required" : false,
          "array" : false,
          "internalType" : "Real64"
        }, {
          "attributeType" : "Internal",
          "name" : "power",
          "nullable" : false,
          "required" : false,
          "array" : false,
          "internalType" : "Real64"
        }, {
          "attributeType" : "Internal",
          "name" : "moisture",
          "nullable" : false,
          "required" : false,
          "array" : false,
          "internalType" : "Real64"
        }, {
          "attributeType" : "Internal",
          "name" : "vibration",
          "nullable" : false,
          "required" : false,
          "array" : false,
          "internalType" : "Real64"
        }, {
          "attributeType" : "Internal",
          "name" : "temperature",
          "nullable" : false,
          "required" : false,
          "array" : false,
          "internalType" : "Real64"
        }, {
          "attributeType" : "Internal",
          "name" : "status",
          "nullable" : false,
          "required" : false,
          "array" : false,
          "internalType" : "Boolean"
        } ]
      }, {
        "name" : "Packer",
        "tags" : [ ],
        "attributes" : [ {
          "attributeType" : "Internal",
          "name" : "bagsPerMinute",
          "nullable" : false,
          "required" : false,
          "array" : false,
          "internalType" : "Int32"
        }, {
          "attributeType" : "Internal",
          "name" : "fillWeight",
          "nullable" : false,
          "required" : false,
          "array" : false,
          "internalType" : "Real64"
        }, {
          "attributeType" : "Internal",
          "name" : "bagCount",
          "nullable" : false,
          "required" : false,
          "array" : false,
          "internalType" : "Int64"
        }, {
          "attributeType" : "Internal",
          "name" : "packagingSupply",
          "nullable" : false,
          "required" : false,
          "array" : false,
          "internalType" : "Int64"
        }, {
          "attributeType" : "Internal",
          "name" : "goodSeals",
          "nullable" : false,
          "required" : false,
          "array" : false,
          "internalType" : "Int64"
        }, {
          "attributeType" : "Internal",
          "name" : "badSeals",
          "nullable" : false,
          "required" : false,
          "array" : false,
          "internalType" : "Int64"
        }, {
          "attributeType" : "Internal",
          "name" : "power",
          "nullable" : false,
          "required" : false,
          "array" : false,
          "internalType" : "Real64"
        }, {
          "attributeType" : "Internal",
          "name" : "status",
          "nullable" : false,
          "required" : false,
          "array" : false,
          "internalType" : "Boolean"
        } ]
      } ],
      "instances" : [ {
        "name" : "crusher",
        "tags" : [ ],
        "model" : "Crusher",
        "rootValueAs" : "Object",
        "template" : {
          "type" : "Off"
        },
        "executeMode" : "V4",
        "initExpression" : "",
        "attributes" : [ {
          "name" : "feedRate",
          "expression" : {
            "type" : "Reference",
            "reference" : {
              "type" : "Input",
              "name" : "FertilizerDemo_Line1",
              "params" : { },
              "path" : ".crusher.feedRate",
              "connectionName" : "opc"
            }
          }
        }, {
          "name" : "powerKW",
          "expression" : {
            "type" : "Reference",
            "reference" : {
              "type" : "Input",
              "name" : "FertilizerDemo_Line1",
              "params" : { },
              "path" : ".crusher.powerKW",
              "connectionName" : "opc"
            }
          }
        }, {
          "name" : "rpm",
          "expression" : {
            "type" : "Reference",
            "reference" : {
              "type" : "Input",
              "name" : "FertilizerDemo_Line1",
              "params" : { },
              "path" : ".crusher.rpm",
              "connectionName" : "opc"
            }
          }
        }, {
          "name" : "vibration",
          "expression" : {
            "type" : "Reference",
            "reference" : {
              "type" : "Input",
              "name" : "FertilizerDemo_Line1",
              "params" : { },
              "path" : ".crusher.vibration",
              "connectionName" : "opc"
            }
          }
        }, {
          "name" : "temperature",
          "expression" : {
            "type" : "Reference",
            "reference" : {
              "type" : "Input",
              "name" : "FertilizerDemo_Line1",
              "params" : { },
              "path" : ".crusher.temperature",
              "connectionName" : "opc"
            }
          }
        }, {
          "name" : "status",
          "expression" : {
            "type" : "Reference",
            "reference" : {
              "type" : "Input",
              "name" : "FertilizerDemo_Line1",
              "params" : { },
              "path" : ".crusher.status",
              "connectionName" : "opc"
            }
          }
        }, {
          "name" : "crushRate",
          "expression" : {
            "type" : "Reference",
            "reference" : {
              "type" : "Input",
              "name" : "FertilizerDemo_Line1",
              "params" : { },
              "path" : ".crusher.crushRate",
              "connectionName" : "opc"
            }
          }
        } ],
        "parameters" : {
          "type" : "EmptyParameters"
        }
      }, {
        "name" : "crusher_sim_opc",
        "description" : "Simulates a high feeder rate causing production issues",
        "groupAs" : "/simulation",
        "tags" : [ ],
        "model" : "Crusher",
        "rootValueAs" : "Object",
        "template" : {
          "type" : "Off"
        },
        "executeMode" : "V4",
        "initExpression" : "variables.mixer = CrusherSimulator.simulateNow(\"normal\")",
        "attributes" : [ {
          "name" : "feedRate",
          "expression" : {
            "type" : "JavaScript",
            "expression" : "return variables.mixer.feedRate"
          }
        }, {
          "name" : "powerKW",
          "expression" : {
            "type" : "JavaScript",
            "expression" : "return variables.mixer.power"
          }
        }, {
          "name" : "rpm",
          "expression" : {
            "type" : "JavaScript",
            "expression" : "return variables.mixer.rpm"
          }
        }, {
          "name" : "vibration",
          "expression" : {
            "type" : "JavaScript",
            "expression" : "return variables.mixer.vibration"
          }
        }, {
          "name" : "temperature",
          "expression" : {
            "type" : "JavaScript",
            "expression" : "return variables.mixer.temperature"
          }
        }, {
          "name" : "status",
          "expression" : {
            "type" : "JavaScript",
            "expression" : ""
          },
          "defaultValue" : true
        }, {
          "name" : "crushRate",
          "expression" : {
            "type" : "JavaScript",
            "expression" : "return variables.mixer.crushRate"
          }
        } ],
        "parameters" : {
          "type" : "EmptyParameters"
        }
      }, {
        "name" : "drumDryer",
        "tags" : [ ],
        "model" : "DrumDryer",
        "rootValueAs" : "Object",
        "template" : {
          "type" : "Off"
        },
        "executeMode" : "V4",
        "initExpression" : "",
        "attributes" : [ {
          "name" : "inletMoisture",
          "expression" : {
            "type" : "Reference",
            "reference" : {
              "type" : "Input",
              "name" : "FertilizerDemo_Line1",
              "params" : { },
              "path" : ".drumDryer.inletMoisture",
              "connectionName" : "opc"
            }
          }
        }, {
          "name" : "outletMoisture",
          "expression" : {
            "type" : "Reference",
            "reference" : {
              "type" : "Input",
              "name" : "FertilizerDemo_Line1",
              "params" : { },
              "path" : ".drumDryer.outletMoisture",
              "connectionName" : "opc"
            }
          }
        }, {
          "name" : "dryingTimeSeconds",
          "expression" : {
            "type" : "Reference",
            "reference" : {
              "type" : "Input",
              "name" : "FertilizerDemo_Line1",
              "params" : { },
              "path" : ".drumDryer.dryingTimeSeconds",
              "connectionName" : "opc"
            }
          }
        }, {
          "name" : "flowRate",
          "expression" : {
            "type" : "Reference",
            "reference" : {
              "type" : "Input",
              "name" : "FertilizerDemo_Line1",
              "params" : { },
              "path" : ".drumDryer.flowRate",
              "connectionName" : "opc"
            }
          }
        }, {
          "name" : "airFlow",
          "expression" : {
            "type" : "Reference",
            "reference" : {
              "type" : "Input",
              "name" : "FertilizerDemo_Line1",
              "params" : { },
              "path" : ".drumDryer.airFlow",
              "connectionName" : "opc"
            }
          }
        }, {
          "name" : "rpm",
          "expression" : {
            "type" : "Reference",
            "reference" : {
              "type" : "Input",
              "name" : "FertilizerDemo_Line1",
              "params" : { },
              "path" : ".drumDryer.rpm",
              "connectionName" : "opc"
            }
          }
        }, {
          "name" : "pressure",
          "expression" : {
            "type" : "Reference",
            "reference" : {
              "type" : "Input",
              "name" : "FertilizerDemo_Line1",
              "params" : { },
              "path" : ".drumDryer.pressure",
              "connectionName" : "opc"
            }
          }
        }, {
          "name" : "power",
          "expression" : {
            "type" : "Reference",
            "reference" : {
              "type" : "Input",
              "name" : "FertilizerDemo_Line1",
              "params" : { },
              "path" : ".drumDryer.power",
              "connectionName" : "opc"
            }
          }
        }, {
          "name" : "temperature",
          "expression" : {
            "type" : "Reference",
            "reference" : {
              "type" : "Input",
              "name" : "FertilizerDemo_Line1",
              "params" : { },
              "path" : ".drumDryer.temperature",
              "connectionName" : "opc"
            }
          }
        }, {
          "name" : "status",
          "expression" : {
            "type" : "Reference",
            "reference" : {
              "type" : "Input",
              "name" : "FertilizerDemo_Line1",
              "params" : { },
              "path" : ".drumDryer.status",
              "connectionName" : "opc"
            }
          }
        } ],
        "parameters" : {
          "type" : "EmptyParameters"
        }
      }, {
        "name" : "drumDryer_sim_opc",
        "groupAs" : "/simulation",
        "tags" : [ ],
        "model" : "DrumDryer",
        "rootValueAs" : "Object",
        "template" : {
          "type" : "Off"
        },
        "executeMode" : "V4",
        "initExpression" : "",
        "attributes" : [ {
          "name" : "inletMoisture",
          "expression" : {
            "type" : "JavaScript",
            "expression" : "return getRandomInRange(40, 80)"
          }
        }, {
          "name" : "outletMoisture",
          "expression" : {
            "type" : "JavaScript",
            "expression" : "return getRandomInRange(0, 10)"
          }
        }, {
          "name" : "dryingTimeSeconds",
          "expression" : {
            "type" : "JavaScript",
            "expression" : "return getRandomInRange(58, 62)"
          }
        }, {
          "name" : "flowRate",
          "expression" : {
            "type" : "JavaScript",
            "expression" : "return getRandomInRange(10, 20)"
          }
        }, {
          "name" : "airFlow",
          "expression" : {
            "type" : "JavaScript",
            "expression" : "return getRandomInRange(18, 15)"
          }
        }, {
          "name" : "rpm",
          "expression" : {
            "type" : "JavaScript",
            "expression" : "return getRandomInRange(800, 925)"
          }
        }, {
          "name" : "pressure",
          "expression" : {
            "type" : "JavaScript",
            "expression" : "return getRandomInRange(8, 12)"
          }
        }, {
          "name" : "power",
          "expression" : {
            "type" : "JavaScript",
            "expression" : "return getRandomInRange(65, 80)"
          }
        }, {
          "name" : "temperature",
          "expression" : {
            "type" : "JavaScript",
            "expression" : "return getRandomInRange(130, 210)"
          }
        }, {
          "name" : "status",
          "expression" : {
            "type" : "JavaScript",
            "expression" : ""
          },
          "defaultValue" : true
        } ],
        "parameters" : {
          "type" : "EmptyParameters"
        }
      }, {
        "name" : "granulator",
        "tags" : [ ],
        "model" : "Granulator",
        "rootValueAs" : "Object",
        "template" : {
          "type" : "Off"
        },
        "executeMode" : "V4",
        "initExpression" : "",
        "attributes" : [ {
          "name" : "moisture",
          "expression" : {
            "type" : "Reference",
            "reference" : {
              "type" : "Input",
              "name" : "FertilizerDemo_Line1",
              "params" : { },
              "path" : ".granulator.moisture",
              "connectionName" : "opc"
            }
          }
        }, {
          "name" : "binderRate",
          "expression" : {
            "type" : "Reference",
            "reference" : {
              "type" : "Input",
              "name" : "FertilizerDemo_Line1",
              "params" : { },
              "path" : ".granulator.binderRate",
              "connectionName" : "opc"
            }
          }
        }, {
          "name" : "sprayRate",
          "expression" : {
            "type" : "Reference",
            "reference" : {
              "type" : "Input",
              "name" : "FertilizerDemo_Line1",
              "params" : { },
              "path" : ".granulator.sprayRate",
              "connectionName" : "opc"
            }
          }
        }, {
          "name" : "rpm",
          "expression" : {
            "type" : "Reference",
            "reference" : {
              "type" : "Input",
              "name" : "FertilizerDemo_Line1",
              "params" : { },
              "path" : ".granulator.rpm",
              "connectionName" : "opc"
            }
          }
        }, {
          "name" : "pressure",
          "expression" : {
            "type" : "Reference",
            "reference" : {
              "type" : "Input",
              "name" : "FertilizerDemo_Line1",
              "params" : { },
              "path" : ".granulator.pressure",
              "connectionName" : "opc"
            }
          }
        }, {
          "name" : "power",
          "expression" : {
            "type" : "Reference",
            "reference" : {
              "type" : "Input",
              "name" : "FertilizerDemo_Line1",
              "params" : { },
              "path" : ".granulator.power",
              "connectionName" : "opc"
            }
          }
        }, {
          "name" : "temperature",
          "expression" : {
            "type" : "Reference",
            "reference" : {
              "type" : "Input",
              "name" : "FertilizerDemo_Line1",
              "params" : { },
              "path" : ".granulator.temperature",
              "connectionName" : "opc"
            }
          }
        }, {
          "name" : "status",
          "expression" : {
            "type" : "Reference",
            "reference" : {
              "type" : "Input",
              "name" : "FertilizerDemo_Line1",
              "params" : { },
              "path" : ".granulator.status",
              "connectionName" : "opc"
            }
          }
        } ],
        "parameters" : {
          "type" : "EmptyParameters"
        }
      }, {
        "name" : "granulator_sim_opc",
        "groupAs" : "/simulation",
        "tags" : [ ],
        "model" : "Granulator",
        "rootValueAs" : "Object",
        "template" : {
          "type" : "Off"
        },
        "executeMode" : "V4",
        "initExpression" : "",
        "attributes" : [ {
          "name" : "moisture",
          "expression" : {
            "type" : "JavaScript",
            "expression" : "return getRandomInRange(0, 10)"
          }
        }, {
          "name" : "binderRate",
          "expression" : {
            "type" : "JavaScript",
            "expression" : "return getRandomInRange(5, 12)"
          }
        }, {
          "name" : "sprayRate",
          "expression" : {
            "type" : "JavaScript",
            "expression" : "return getRandomInRange(8, 12)"
          }
        }, {
          "name" : "rpm",
          "expression" : {
            "type" : "JavaScript",
            "expression" : "return getRandomInRange(600, 800)"
          }
        }, {
          "name" : "pressure",
          "expression" : {
            "type" : "JavaScript",
            "expression" : "return getRandomInRange(8, 12)"
          }
        }, {
          "name" : "power",
          "expression" : {
            "type" : "JavaScript",
            "expression" : "return getRandomInRange(80, 92)"
          }
        }, {
          "name" : "temperature",
          "expression" : {
            "type" : "JavaScript",
            "expression" : "return getRandomInRange(110, 130)"
          }
        }, {
          "name" : "status",
          "expression" : {
            "type" : "JavaScript",
            "expression" : ""
          },
          "defaultValue" : true
        } ],
        "parameters" : {
          "type" : "EmptyParameters"
        }
      }, {
        "name" : "line2_crusher_example",
        "groupAs" : "/aiGenDemo",
        "tags" : [ ],
        "model" : "Crusher",
        "rootValueAs" : "Object",
        "template" : {
          "type" : "Off"
        },
        "executeMode" : "V4",
        "initExpression" : "",
        "attributes" : [ {
          "name" : "feedRate",
          "expression" : {
            "type" : "Reference",
            "reference" : {
              "type" : "Input",
              "name" : "rootInstanceGeneration",
              "params" : { },
              "path" : ".Line2.crusher.F1776",
              "connectionName" : "opc"
            }
          }
        }, {
          "name" : "powerKW",
          "expression" : {
            "type" : "Reference",
            "reference" : {
              "type" : "Input",
              "name" : "rootInstanceGeneration",
              "params" : { },
              "path" : ".Line2.crusher.P2XUI",
              "connectionName" : "opc"
            }
          }
        }, {
          "name" : "rpm",
          "expression" : {
            "type" : "Reference",
            "reference" : {
              "type" : "Input",
              "name" : "rootInstanceGeneration",
              "params" : { },
              "path" : ".Line2.crusher.R178",
              "connectionName" : "opc"
            }
          }
        }, {
          "name" : "vibration",
          "expression" : {
            "type" : "Reference",
            "reference" : {
              "type" : "Input",
              "name" : "rootInstanceGeneration",
              "params" : { },
              "path" : ".Line2.crusher.HZ_13",
              "connectionName" : "opc"
            }
          }
        }, {
          "name" : "temperature",
          "expression" : {
            "type" : "Reference",
            "reference" : {
              "type" : "Input",
              "name" : "rootInstanceGeneration",
              "params" : { },
              "path" : ".Line2.crusher.TX_77_9",
              "connectionName" : "opc"
            }
          }
        }, {
          "name" : "status",
          "expression" : {
            "type" : "Reference",
            "reference" : {
              "type" : "Input",
              "name" : "rootInstanceGeneration",
              "params" : { },
              "path" : ".Line2.crusher.S6",
              "connectionName" : "opc"
            }
          }
        }, {
          "name" : "crushRate",
          "expression" : {
            "type" : "Reference",
            "reference" : {
              "type" : "Input",
              "name" : "rootInstanceGeneration",
              "params" : { },
              "path" : ".Line2.crusher.C2230_H1",
              "connectionName" : "opc"
            }
          }
        } ],
        "parameters" : {
          "type" : "EmptyParameters"
        }
      }, {
        "name" : "mixer",
        "tags" : [ ],
        "model" : "Mixer",
        "rootValueAs" : "Object",
        "template" : {
          "type" : "Off"
        },
        "executeMode" : "V4",
        "initExpression" : "",
        "attributes" : [ {
          "name" : "mixingTime",
          "expression" : {
            "type" : "Reference",
            "reference" : {
              "type" : "Input",
              "name" : "FertilizerDemo_Line1",
              "params" : { },
              "path" : ".mixer.mixingTime",
              "connectionName" : "opc"
            }
          }
        }, {
          "name" : "rpms",
          "expression" : {
            "type" : "Reference",
            "reference" : {
              "type" : "Input",
              "name" : "FertilizerDemo_Line1",
              "params" : { },
              "path" : ".mixer.rpms",
              "connectionName" : "opc"
            }
          }
        }, {
          "name" : "feedRate",
          "expression" : {
            "type" : "Reference",
            "reference" : {
              "type" : "Input",
              "name" : "FertilizerDemo_Line1",
              "params" : { },
              "path" : ".mixer.feedRate",
              "connectionName" : "opc"
            }
          }
        }, {
          "name" : "power",
          "expression" : {
            "type" : "Reference",
            "reference" : {
              "type" : "Input",
              "name" : "FertilizerDemo_Line1",
              "params" : { },
              "path" : ".mixer.power",
              "connectionName" : "opc"
            }
          }
        }, {
          "name" : "moisture",
          "expression" : {
            "type" : "Reference",
            "reference" : {
              "type" : "Input",
              "name" : "FertilizerDemo_Line1",
              "params" : { },
              "path" : ".mixer.moisture",
              "connectionName" : "opc"
            }
          }
        }, {
          "name" : "vibration",
          "expression" : {
            "type" : "Reference",
            "reference" : {
              "type" : "Input",
              "name" : "FertilizerDemo_Line1",
              "params" : { },
              "path" : ".mixer.vibration",
              "connectionName" : "opc"
            }
          }
        }, {
          "name" : "temperature",
          "expression" : {
            "type" : "Reference",
            "reference" : {
              "type" : "Input",
              "name" : "FertilizerDemo_Line1",
              "params" : { },
              "path" : ".mixer.temperature",
              "connectionName" : "opc"
            }
          }
        }, {
          "name" : "status",
          "expression" : {
            "type" : "Reference",
            "reference" : {
              "type" : "Input",
              "name" : "FertilizerDemo_Line1",
              "params" : { },
              "path" : ".mixer.status",
              "connectionName" : "opc"
            }
          }
        } ],
        "parameters" : {
          "type" : "EmptyParameters"
        }
      }, {
        "name" : "mixer_opc_sim",
        "groupAs" : "/simulation",
        "tags" : [ ],
        "model" : "Mixer",
        "rootValueAs" : "Object",
        "template" : {
          "type" : "Off"
        },
        "executeMode" : "V4",
        "initExpression" : "",
        "attributes" : [ {
          "name" : "mixingTime",
          "expression" : {
            "type" : "JavaScript",
            "expression" : "return getRandomInRange(120, 180)"
          }
        }, {
          "name" : "rpms",
          "expression" : {
            "type" : "JavaScript",
            "expression" : "return getRandomInRange(15, 20)"
          }
        }, {
          "name" : "feedRate",
          "expression" : {
            "type" : "JavaScript",
            "expression" : "return getRandomInRange(8, 12)"
          }
        }, {
          "name" : "power",
          "expression" : {
            "type" : "JavaScript",
            "expression" : "return getRandomInRange(55, 70)"
          }
        }, {
          "name" : "moisture",
          "expression" : {
            "type" : "JavaScript",
            "expression" : "return getRandomInRange(62, 95)"
          }
        }, {
          "name" : "vibration",
          "expression" : {
            "type" : "JavaScript",
            "expression" : "return getRandomInRange(33, 56)"
          }
        }, {
          "name" : "temperature",
          "expression" : {
            "type" : "JavaScript",
            "expression" : "return getRandomInRange(72, 85)"
          }
        }, {
          "name" : "status",
          "expression" : {
            "type" : "Reference",
            "reference" : {
              "type" : "Empty",
              "name" : "",
              "params" : { },
              "path" : ""
            }
          },
          "defaultValue" : true
        } ],
        "parameters" : {
          "type" : "EmptyParameters"
        }
      }, {
        "name" : "packer",
        "tags" : [ ],
        "model" : "Packer",
        "rootValueAs" : "Object",
        "template" : {
          "type" : "Off"
        },
        "executeMode" : "V4",
        "initExpression" : "",
        "attributes" : [ {
          "name" : "bagsPerMinute",
          "expression" : {
            "type" : "Reference",
            "reference" : {
              "type" : "Input",
              "name" : "FertilizerDemo_Line1",
              "params" : { },
              "path" : ".packer.bagsPerMintue",
              "connectionName" : "opc"
            }
          }
        }, {
          "name" : "fillWeight",
          "expression" : {
            "type" : "Reference",
            "reference" : {
              "type" : "Input",
              "name" : "FertilizerDemo_Line1",
              "params" : { },
              "path" : ".packer.fillWeight",
              "connectionName" : "opc"
            }
          }
        }, {
          "name" : "bagCount",
          "expression" : {
            "type" : "Reference",
            "reference" : {
              "type" : "Input",
              "name" : "FertilizerDemo_Line1",
              "params" : { },
              "path" : ".packer.bagCount",
              "connectionName" : "opc"
            }
          }
        }, {
          "name" : "packagingSupply",
          "expression" : {
            "type" : "Reference",
            "reference" : {
              "type" : "Input",
              "name" : "FertilizerDemo_Line1",
              "params" : { },
              "path" : ".packer.packagingSupply",
              "connectionName" : "opc"
            }
          }
        }, {
          "name" : "goodSeals",
          "expression" : {
            "type" : "Reference",
            "reference" : {
              "type" : "Input",
              "name" : "FertilizerDemo_Line1",
              "params" : { },
              "path" : ".packer.goodSeals",
              "connectionName" : "opc"
            }
          }
        }, {
          "name" : "badSeals",
          "expression" : {
            "type" : "Reference",
            "reference" : {
              "type" : "Input",
              "name" : "FertilizerDemo_Line1",
              "params" : { },
              "path" : ".packer.badSeals",
              "connectionName" : "opc"
            }
          }
        }, {
          "name" : "power",
          "expression" : {
            "type" : "Reference",
            "reference" : {
              "type" : "Input",
              "name" : "FertilizerDemo_Line1",
              "params" : { },
              "path" : ".packer.power",
              "connectionName" : "opc"
            }
          }
        }, {
          "name" : "status",
          "expression" : {
            "type" : "Reference",
            "reference" : {
              "type" : "Input",
              "name" : "FertilizerDemo_Line1",
              "params" : { },
              "path" : ".packer.status",
              "connectionName" : "opc"
            }
          }
        } ],
        "parameters" : {
          "type" : "EmptyParameters"
        }
      }, {
        "name" : "packer_sim_opc",
        "groupAs" : "/simulation",
        "tags" : [ ],
        "model" : "Packer",
        "rootValueAs" : "Object",
        "template" : {
          "type" : "Off"
        },
        "executeMode" : "V4",
        "initExpression" : "variables.packer = PackerSimulator.simulateNow(\"idealFill\")",
        "attributes" : [ {
          "name" : "bagsPerMinute",
          "expression" : {
            "type" : "JavaScript",
            "expression" : "return variables.packer.bagsPerMinute"
          }
        }, {
          "name" : "fillWeight",
          "expression" : {
            "type" : "JavaScript",
            "expression" : "return variables.packer.fillWeight"
          }
        }, {
          "name" : "bagCount",
          "expression" : {
            "type" : "JavaScript",
            "expression" : "return variables.packer.bagCount"
          }
        }, {
          "name" : "packagingSupply",
          "expression" : {
            "type" : "JavaScript",
            "expression" : "return variables.packer.packagingSupply"
          }
        }, {
          "name" : "goodSeals",
          "expression" : {
            "type" : "JavaScript",
            "expression" : "return variables.packer.goodSeals"
          }
        }, {
          "name" : "badSeals",
          "expression" : {
            "type" : "JavaScript",
            "expression" : "return variables.packer.badSeals"
          }
        }, {
          "name" : "power",
          "expression" : {
            "type" : "JavaScript",
            "expression" : "return variables.packer.power"
          }
        }, {
          "name" : "status",
          "expression" : {
            "type" : "JavaScript",
            "expression" : ""
          },
          "defaultValue" : true
        } ],
        "parameters" : {
          "type" : "EmptyParameters"
        }
      } ]
    },
    "pipelines" : [ {
      "name" : "ignitionBrowse",
      "groupAs" : "/mcpTools/ignition",
      "tags" : [ ],
      "inputStages" : [ "browseIgnition" ],
      "stages" : [ {
        "name" : "browseIgnition",
        "display" : {
          "position" : {
            "x" : 240,
            "y" : 0
          }
        },
        "config" : {
          "type" : ".ReadConfig",
          "failureOutputs" : [ ],
          "reference" : {
            "type" : "Input",
            "name" : "browse",
            "params" : { },
            "path" : "",
            "connectionName" : "ignition"
          }
        },
        "outputs" : [ "removeInternal" ]
      }, {
        "name" : "removeInternal",
        "display" : {
          "position" : {
            "x" : 690,
            "y" : 0
          }
        },
        "config" : {
          "type" : ".AttributeFilterConfig",
          "filterOption" : "exclude",
          "filterList" : [ {
            "filterType" : "startsWithFilter",
            "filterText" : "_",
            "recursive" : true
          } ],
          "retainAsMetadata" : false,
          "metadataKey" : "filtered"
        },
        "outputs" : [ "getPaths" ]
      }, {
        "name" : "getPaths",
        "display" : {
          "position" : {
            "x" : 1140,
            "y" : 0
          }
        },
        "config" : {
          "type" : ".TransformConfig",
          "transformExpression" : "stage.setValue(getAllPaths(event.value, '/'));\r\n\r\nfunction getAllPaths(obj, delim, prefix = '') {\r\n  let paths = new Set();\r\n\r\n  for (const key in obj) {\r\n    if (!obj.hasOwnProperty(key)) continue;\r\n\r\n    const path = prefix ? `${prefix}${delim}${key}` : key;\r\n    paths.add(path); // Include intermediate path\r\n\r\n    const value = obj[key];\r\n\r\n    if (value !== null && typeof value === 'object' && !Array.isArray(value)) {\r\n      const subPaths = getAllPaths(value, delim, path);\r\n      subPaths.forEach(p => paths.add(p));\r\n    }\r\n  }\r\n\r\n  return Array.from(paths);\r\n}\r\n"
        },
        "outputs" : [ "Return" ]
      }, {
        "name" : "Return",
        "display" : {
          "position" : {
            "x" : 1590,
            "y" : 0
          }
        },
        "config" : {
          "type" : ".ReturnConfig"
        },
        "outputs" : [ ]
      } ],
      "trackActivity" : false,
      "triggers" : [ {
        "name" : "APITrigger",
        "display" : {
          "position" : {
            "x" : -450,
            "y" : 0
          }
        },
        "config" : {
          "type" : ".TriggerApi",
          "enabled" : true,
          "parameters" : {
            "type" : "EmptyParameters"
          }
        }
      } ],
      "errorHandler" : {
        "type" : "default"
      }
    }, {
      "name" : "ignitionRead",
      "groupAs" : "/mcpTools/ignition",
      "tags" : [ ],
      "inputStages" : [ "Read" ],
      "stages" : [ {
        "name" : "Read",
        "display" : {
          "position" : {
            "x" : 240,
            "y" : 0
          }
        },
        "config" : {
          "type" : ".ReadConfig",
          "failureOutputs" : [ ],
          "reference" : {
            "type" : "Input",
            "name" : "read",
            "params" : {
              "path" : "{{event.value.path}}"
            },
            "path" : "",
            "connectionName" : "ignition"
          }
        },
        "outputs" : [ "Return" ]
      }, {
        "name" : "Return",
        "display" : {
          "position" : {
            "x" : 690,
            "y" : 0
          }
        },
        "config" : {
          "type" : ".ReturnConfig"
        },
        "outputs" : [ ]
      } ],
      "trackActivity" : false,
      "triggers" : [ {
        "name" : "APITrigger",
        "display" : {
          "position" : {
            "x" : -450,
            "y" : 0
          }
        },
        "config" : {
          "type" : ".TriggerApi",
          "enabled" : true,
          "parameters" : {
            "type" : "inline",
            "model" : {
              "name" : "params",
              "tags" : [ ],
              "attributes" : [ {
                "attributeType" : "Internal",
                "name" : "path",
                "nullable" : false,
                "required" : false,
                "array" : false,
                "internalType" : "String"
              } ]
            }
          }
        }
      } ],
      "errorHandler" : {
        "type" : "default"
      }
    }, {
      "name" : "mqttBrowse",
      "description" : "Use this tool to browse the factory and see all the machines that are available to read. This returns the path to each machine/topic.",
      "groupAs" : "/mcpTools/mqtt",
      "tags" : [ ],
      "inputStages" : [ "Read" ],
      "stages" : [ {
        "name" : "Read",
        "display" : {
          "position" : {
            "x" : 240,
            "y" : 0
          }
        },
        "config" : {
          "type" : ".ReadConfig",
          "failureOutputs" : [ ],
          "reference" : {
            "type" : "Input",
            "name" : "browse",
            "params" : { },
            "path" : "",
            "connectionName" : "uns"
          }
        },
        "outputs" : [ "getPaths" ]
      }, {
        "name" : "getPaths",
        "display" : {
          "position" : {
            "x" : 690,
            "y" : 0
          }
        },
        "config" : {
          "type" : ".TransformConfig",
          "transformExpression" : "stage.setValue(findAllTopics(event.value));\r\n\r\nfunction findAllTopics(obj) {\r\n  let topics = [];\r\n\r\n  for (const key in obj) {\r\n    if (!obj.hasOwnProperty(key)) continue;\r\n\r\n    const value = obj[key];\r\n\r\n    if (key === '_topic') {\r\n      topics.push(value);\r\n    } else if (value !== null && typeof value === 'object') {\r\n      topics = topics.concat(findAllTopics(value));\r\n    }\r\n  }\r\n\r\n  return topics;\r\n}\r\n"
        },
        "outputs" : [ "Return" ]
      }, {
        "name" : "Return",
        "display" : {
          "position" : {
            "x" : 1140,
            "y" : 0
          }
        },
        "config" : {
          "type" : ".ReturnConfig"
        },
        "outputs" : [ ]
      } ],
      "trackActivity" : false,
      "triggers" : [ {
        "name" : "APITrigger",
        "display" : {
          "position" : {
            "x" : -450,
            "y" : 0
          }
        },
        "config" : {
          "type" : ".TriggerApi",
          "enabled" : true,
          "parameters" : {
            "type" : "EmptyParameters"
          }
        }
      } ],
      "errorHandler" : {
        "type" : "default"
      }
    }, {
      "name" : "mqttRead",
      "description" : "Use this tool to read an MQTT topic and return the current value for the topic.",
      "groupAs" : "/mcpTools/mqtt",
      "tags" : [ ],
      "inputStages" : [ "readTopic" ],
      "stages" : [ {
        "name" : "readTopic",
        "display" : {
          "position" : {
            "x" : 240,
            "y" : 0
          }
        },
        "config" : {
          "type" : ".ReadConfig",
          "failureOutputs" : [ ],
          "reference" : {
            "type" : "Input",
            "name" : "read",
            "params" : {
              "topic" : "{{event.value.topic}}"
            },
            "path" : "",
            "connectionName" : "uns"
          }
        },
        "outputs" : [ "Return" ]
      }, {
        "name" : "Return",
        "display" : {
          "position" : {
            "x" : 690,
            "y" : 0
          }
        },
        "config" : {
          "type" : ".ReturnConfig"
        },
        "outputs" : [ ]
      } ],
      "trackActivity" : false,
      "triggers" : [ {
        "name" : "APITrigger",
        "display" : {
          "position" : {
            "x" : -450,
            "y" : 0
          }
        },
        "config" : {
          "type" : ".TriggerApi",
          "enabled" : true,
          "parameters" : {
            "type" : "inline",
            "model" : {
              "name" : "params",
              "tags" : [ ],
              "attributes" : [ {
                "attributeType" : "Internal",
                "name" : "topic",
                "nullable" : false,
                "required" : false,
                "array" : false,
                "internalType" : "String"
              } ]
            }
          }
        }
      } ],
      "errorHandler" : {
        "type" : "default"
      }
    }, {
      "name" : "opcBrowse",
      "groupAs" : "/mcpTools/opc",
      "tags" : [ ],
      "inputStages" : [ "Read" ],
      "stages" : [ {
        "name" : "Read",
        "display" : {
          "position" : {
            "x" : 240,
            "y" : 0
          }
        },
        "config" : {
          "type" : ".ReadConfig",
          "failureOutputs" : [ ],
          "reference" : {
            "type" : "Input",
            "name" : "browse",
            "params" : { },
            "path" : "",
            "connectionName" : "opc"
          }
        },
        "outputs" : [ "removeSystemTags" ]
      }, {
        "name" : "getPaths",
        "display" : {
          "position" : {
            "x" : 1140,
            "y" : 0
          }
        },
        "config" : {
          "type" : ".TransformConfig",
          "transformExpression" : "stage.setValue(findAllPaths(event.value));\r\n\r\nfunction findAllPaths(obj) {\r\n  let topics = [];\r\n\r\n  for (const key in obj) {\r\n    if (!obj.hasOwnProperty(key)) continue;\r\n\r\n    const value = obj[key];\r\n\r\n    if (key === '_tagName') {\r\n      topics.push(value);\r\n    } else if (value !== null && typeof value === 'object') {\r\n      topics = topics.concat(findAllPaths(value));\r\n    }\r\n  }\r\n\r\n  return topics;\r\n}\r\n"
        },
        "outputs" : [ "removeNS" ]
      }, {
        "name" : "Return",
        "display" : {
          "position" : {
            "x" : 2040,
            "y" : 0
          }
        },
        "config" : {
          "type" : ".ReturnConfig"
        },
        "outputs" : [ ]
      }, {
        "name" : "removeSystemTags",
        "display" : {
          "position" : {
            "x" : 690,
            "y" : 0
          }
        },
        "config" : {
          "type" : ".AttributeFilterConfig",
          "filterOption" : "exclude",
          "filterList" : [ {
            "filterType" : "containsFilter",
            "filterText" : "_System",
            "recursive" : true
          }, {
            "filterType" : "containsFilter",
            "filterText" : "_Statistics",
            "recursive" : true
          } ],
          "retainAsMetadata" : false,
          "metadataKey" : "filtered"
        },
        "outputs" : [ "getPaths" ]
      }, {
        "name" : "removeNS",
        "display" : {
          "position" : {
            "x" : 1590,
            "y" : 0
          }
        },
        "config" : {
          "type" : ".TransformConfig",
          "transformExpression" : "stage.setValue(stripPrefix(event.value))\r\n\r\nfunction stripPrefix(paths, prefix = '2/1/') {\r\n  return paths.map(path => path.startsWith(prefix) ? path.slice(prefix.length) : path);\r\n}"
        },
        "outputs" : [ "Return" ]
      } ],
      "trackActivity" : false,
      "triggers" : [ {
        "name" : "APITrigger",
        "display" : {
          "position" : {
            "x" : -450,
            "y" : 0
          }
        },
        "config" : {
          "type" : ".TriggerApi",
          "enabled" : true,
          "parameters" : {
            "type" : "EmptyParameters"
          }
        }
      } ],
      "errorHandler" : {
        "type" : "default"
      }
    }, {
      "name" : "opcReadTag",
      "groupAs" : "/mcpTools/opc",
      "tags" : [ ],
      "inputStages" : [ "readTag" ],
      "stages" : [ {
        "name" : "readTag",
        "display" : {
          "position" : {
            "x" : 240,
            "y" : 0
          }
        },
        "config" : {
          "type" : ".ReadConfig",
          "failureOutputs" : [ ],
          "reference" : {
            "type" : "Input",
            "name" : "read",
            "params" : {
              "tag" : "{{event.value.tag}}"
            },
            "path" : "",
            "connectionName" : "opc"
          }
        },
        "outputs" : [ "Return" ]
      }, {
        "name" : "Return",
        "display" : {
          "position" : {
            "x" : 690,
            "y" : 0
          }
        },
        "config" : {
          "type" : ".ReturnConfig"
        },
        "outputs" : [ ]
      } ],
      "trackActivity" : false,
      "triggers" : [ {
        "name" : "APITrigger",
        "display" : {
          "position" : {
            "x" : -450,
            "y" : 0
          }
        },
        "config" : {
          "type" : ".TriggerApi",
          "enabled" : true,
          "parameters" : {
            "type" : "inline",
            "model" : {
              "name" : "params",
              "tags" : [ ],
              "attributes" : [ {
                "attributeType" : "Internal",
                "name" : "tag",
                "nullable" : false,
                "required" : false,
                "array" : false,
                "internalType" : "String"
              } ]
            }
          }
        }
      } ],
      "errorHandler" : {
        "type" : "default"
      }
    }, {
      "name" : "piBrowse",
      "description" : "Call this to browse the data points available in historical storage. The points are returned as an array of point names.",
      "groupAs" : "/mcpTools/pi",
      "tags" : [ ],
      "inputStages" : [ "browsePI" ],
      "stages" : [ {
        "name" : "browsePI",
        "display" : {
          "position" : {
            "x" : 240,
            "y" : 0
          }
        },
        "config" : {
          "type" : ".ReadConfig",
          "failureOutputs" : [ ],
          "reference" : {
            "type" : "Input",
            "name" : "browse",
            "params" : { },
            "path" : "",
            "connectionName" : "osisoft"
          }
        },
        "outputs" : [ "removeUnderscore" ]
      }, {
        "name" : "Return",
        "display" : {
          "position" : {
            "x" : 1140,
            "y" : 0
          }
        },
        "config" : {
          "type" : ".ReturnConfig"
        },
        "outputs" : [ ]
      }, {
        "name" : "removeUnderscore",
        "display" : {
          "position" : {
            "x" : 690,
            "y" : 0
          }
        },
        "config" : {
          "type" : ".TransformConfig",
          "transformExpression" : "stage.setValue(removeUnderscore(event.value));\r\n\r\nfunction removeUnderscore(paths){\r\n    return paths.filter(str => !str.includes('_'));\r\n}"
        },
        "outputs" : [ "Return" ]
      } ],
      "trackActivity" : false,
      "triggers" : [ {
        "name" : "APITrigger",
        "display" : {
          "position" : {
            "x" : -450,
            "y" : 0
          }
        },
        "config" : {
          "type" : ".TriggerApi",
          "enabled" : true,
          "parameters" : {
            "type" : "EmptyParameters"
          }
        }
      } ],
      "errorHandler" : {
        "type" : "default"
      }
    }, {
      "name" : "piReadAverageHistory",
      "description" : "Reads the time weighted average for one or more points. Points are passed as an array of point names. timeInMinutes is the number of minutes of history to read from the current time.",
      "groupAs" : "/mcpTools/pi",
      "tags" : [ ],
      "inputStages" : [ "Read" ],
      "stages" : [ {
        "name" : "Read",
        "display" : {
          "position" : {
            "x" : 240,
            "y" : 0
          }
        },
        "config" : {
          "type" : ".ReadConfig",
          "failureOutputs" : [ ],
          "reference" : {
            "type" : "Input",
            "name" : "readAggregate",
            "params" : {
              "points" : "{{event.value.points}}",
              "timeInMinutes" : "{{event.value.timeInMinutes}}"
            },
            "path" : "",
            "connectionName" : "osisoft"
          }
        },
        "outputs" : [ "Return" ]
      }, {
        "name" : "Return",
        "display" : {
          "position" : {
            "x" : 717,
            "y" : 1
          }
        },
        "config" : {
          "type" : ".ReturnConfig"
        },
        "outputs" : [ ]
      } ],
      "trackActivity" : false,
      "triggers" : [ {
        "name" : "APITrigger",
        "display" : {
          "position" : {
            "x" : -450,
            "y" : 0
          }
        },
        "config" : {
          "type" : ".TriggerApi",
          "enabled" : true,
          "parameters" : {
            "type" : "inline",
            "model" : {
              "name" : "params",
              "tags" : [ ],
              "attributes" : [ {
                "attributeType" : "Internal",
                "name" : "points",
                "nullable" : false,
                "required" : false,
                "array" : false,
                "internalType" : "Any"
              }, {
                "attributeType" : "Internal",
                "name" : "timeInMinutes",
                "nullable" : false,
                "required" : false,
                "array" : false,
                "internalType" : "String"
              } ]
            }
          }
        }
      } ],
      "errorHandler" : {
        "type" : "default"
      }
    }, {
      "name" : "piReadMetadata",
      "groupAs" : "/mcpTools/pi",
      "tags" : [ ],
      "inputStages" : [ "Read" ],
      "stages" : [ {
        "name" : "Read",
        "display" : {
          "position" : {
            "x" : 240,
            "y" : 0
          }
        },
        "config" : {
          "type" : ".ReadConfig",
          "failureOutputs" : [ ],
          "reference" : {
            "type" : "Input",
            "name" : "readMetadata",
            "params" : {
              "points" : "{{event.value.points}}"
            },
            "path" : "",
            "connectionName" : "osisoft"
          }
        },
        "outputs" : [ "shiftKeys" ]
      }, {
        "name" : "Return",
        "display" : {
          "position" : {
            "x" : 1140,
            "y" : 0
          }
        },
        "config" : {
          "type" : ".ReturnConfig"
        },
        "outputs" : [ ]
      }, {
        "name" : "shiftKeys",
        "display" : {
          "position" : {
            "x" : 690,
            "y" : 0
          }
        },
        "config" : {
          "type" : ".TransformConfig",
          "transformExpression" : "const output = Object.entries(event.value).map(([key, value]) => ({\r\n  name: key,\r\n  ...value\r\n}));\r\n\r\nstage.setValue(output);"
        },
        "outputs" : [ "Return" ]
      } ],
      "trackActivity" : false,
      "triggers" : [ {
        "name" : "APITrigger",
        "display" : {
          "position" : {
            "x" : -450,
            "y" : 0
          }
        },
        "config" : {
          "type" : ".TriggerApi",
          "enabled" : true,
          "parameters" : {
            "type" : "inline",
            "model" : {
              "name" : "params",
              "tags" : [ ],
              "attributes" : [ {
                "attributeType" : "Internal",
                "name" : "points",
                "nullable" : false,
                "required" : false,
                "array" : false,
                "internalType" : "Any"
              } ]
            }
          }
        }
      } ],
      "errorHandler" : {
        "type" : "default"
      }
    }, {
      "name" : "piReadRawHistory",
      "description" : "Reads the raw history for one or more points. Points are passed as an array of point names. timeInMinutes is the number of minutes into the past to read from the current time.",
      "groupAs" : "/mcpTools/pi",
      "tags" : [ ],
      "inputStages" : [ "Read" ],
      "stages" : [ {
        "name" : "Read",
        "display" : {
          "position" : {
            "x" : 240,
            "y" : 0
          }
        },
        "config" : {
          "type" : ".ReadConfig",
          "failureOutputs" : [ ],
          "reference" : {
            "type" : "Input",
            "name" : "read",
            "params" : {
              "points" : "{{event.value.points}}",
              "timeInMinutes" : "{{event.value.timeInMinutes}}"
            },
            "path" : "",
            "connectionName" : "osisoft"
          }
        },
        "outputs" : [ "Return" ]
      }, {
        "name" : "Return",
        "display" : {
          "position" : {
            "x" : 717,
            "y" : 1
          }
        },
        "config" : {
          "type" : ".ReturnConfig"
        },
        "outputs" : [ ]
      } ],
      "trackActivity" : false,
      "triggers" : [ {
        "name" : "APITrigger",
        "display" : {
          "position" : {
            "x" : -450,
            "y" : 0
          }
        },
        "config" : {
          "type" : ".TriggerApi",
          "enabled" : true,
          "parameters" : {
            "type" : "inline",
            "model" : {
              "name" : "params",
              "tags" : [ ],
              "attributes" : [ {
                "attributeType" : "Internal",
                "name" : "points",
                "nullable" : false,
                "required" : false,
                "array" : false,
                "internalType" : "Any"
              }, {
                "attributeType" : "Internal",
                "name" : "timeInMinutes",
                "nullable" : false,
                "required" : false,
                "array" : false,
                "internalType" : "Int32"
              } ]
            }
          }
        }
      } ],
      "errorHandler" : {
        "type" : "default"
      }
    }, {
      "name" : "sim_to_kepware",
      "groupAs" : "/simulation",
      "tags" : [ ],
      "inputStages" : [ "fixNames" ],
      "stages" : [ {
        "name" : "toOPC",
        "display" : {
          "position" : {
            "x" : 690,
            "y" : 0
          }
        },
        "config" : {
          "type" : ".DynamicWriteConfig",
          "failureOutputs" : [ ],
          "connectionReference" : "{{Connection.opc}}",
          "qualifier" : {
            "namespaceIndex" : 2,
            "identifierType" : "String",
            "dataType" : "Auto",
            "maxDepth" : 1,
            "cacheInterval" : {
              "duration" : 1,
              "units" : "Hours"
            },
            "namedRoot" : true,
            "browseVariableNodes" : false,
            "breakupArrays" : false,
            "identifier" : "FertilizerDemo.Line1"
          },
          "qualifierExpression" : "",
          "writeReturn" : "completion"
        },
        "outputs" : [ ]
      }, {
        "name" : "fixNames",
        "display" : {
          "position" : {
            "x" : 240,
            "y" : 0
          }
        },
        "config" : {
          "type" : ".TransformConfig",
          "transformExpression" : "// Names are \"crusher_opc_sim\" and we want the first part only\r\nevent.value[\"#name\"] = event.value[\"#name\"].split(\"_\")[0];\r\nstage.setValue(event.value);"
        },
        "outputs" : [ "toOPC" ]
      } ],
      "trackActivity" : false,
      "triggers" : [ {
        "name" : "getSimulated",
        "display" : {
          "position" : {
            "x" : -450,
            "y" : 0
          }
        },
        "config" : {
          "type" : ".TriggerFlow",
          "enabled" : true,
          "flowEvaluation" : {
            "type" : "Polled",
            "interval" : {
              "duration" : 1,
              "units" : "Seconds"
            },
            "mode" : "Always",
            "expression" : "",
            "delay" : {
              "duration" : 0,
              "units" : "Seconds"
            }
          },
          "inReferences" : [ "{{Instance.crusher_sim_opc}}", "{{Instance.drumDryer_sim_opc}}", "{{Instance.granulator_sim_opc}}", "{{Instance.mixer_opc_sim}}", "{{Instance.packer_sim_opc}}" ],
          "publishMode" : "All",
          "template" : {
            "type" : "Off"
          }
        }
      } ],
      "errorHandler" : {
        "type" : "default"
      }
    }, {
      "name" : "sim_to_pi",
      "groupAs" : "/simulation",
      "tags" : [ ],
      "inputStages" : [ "readLine1" ],
      "stages" : [ {
        "name" : "readLine1",
        "display" : {
          "position" : {
            "x" : 240,
            "y" : 0
          }
        },
        "config" : {
          "type" : ".SmartQueryConfig",
          "query" : {
            "from" : [ "Portland.**" ],
            "where" : "",
            "select" : {
              "what" : [ "value", "path" ],
              "as" : "List",
              "delim" : "\\"
            }
          },
          "breakup" : true
        },
        "outputs" : [ "updatePath" ]
      }, {
        "name" : "toPI",
        "display" : {
          "position" : {
            "x" : 1140,
            "y" : 0
          }
        },
        "config" : {
          "type" : ".DynamicWriteConfig",
          "failureOutputs" : [ ],
          "connectionReference" : "{{Connection.osisoft}}",
          "qualifier" : {
            "type" : "point",
            "options" : {
              "create" : false,
              "updateOption" : "Insert",
              "database" : "FertilizerPlant",
              "path" : "{{event.value._path}}"
            },
            "breakupArrays" : false,
            "filterList" : [ "_path" ]
          },
          "qualifierExpression" : "",
          "writeReturn" : "ignore"
        },
        "outputs" : [ ]
      }, {
        "name" : "updatePath",
        "display" : {
          "position" : {
            "x" : 690,
            "y" : 0
          }
        },
        "config" : {
          "type" : ".TransformConfig",
          "transformExpression" : "event.value._path = event.value._path.replace(/Portland\\\\/g, '');\r\nstage.setValue(event.value);"
        },
        "outputs" : [ "toPI" ]
      } ],
      "trackActivity" : false,
      "triggers" : [ {
        "name" : "fiveSeconds",
        "display" : {
          "position" : {
            "x" : -450,
            "y" : 0
          }
        },
        "config" : {
          "type" : ".TriggerPolled",
          "enabled" : true,
          "interval" : {
            "duration" : 5,
            "units" : "Seconds"
          }
        }
      } ],
      "errorHandler" : {
        "type" : "default"
      }
    }, {
      "name" : "toMQTT",
      "groupAs" : "/uns",
      "tags" : [ ],
      "inputStages" : [ "readNamespace" ],
      "stages" : [ {
        "name" : "readNamespace",
        "display" : {
          "position" : {
            "x" : 207,
            "y" : 3
          }
        },
        "config" : {
          "type" : ".SmartQueryConfig",
          "query" : {
            "from" : [ "**" ],
            "where" : "",
            "select" : {
              "what" : [ "value" ],
              "as" : "List",
              "delim" : "/"
            }
          },
          "breakup" : true
        },
        "outputs" : [ "toMQTT" ]
      }, {
        "name" : "toMQTT",
        "display" : {
          "position" : {
            "x" : 664,
            "y" : 2
          }
        },
        "config" : {
          "type" : ".DynamicWriteConfig",
          "failureOutputs" : [ ],
          "connectionReference" : "{{Connection.uns}}",
          "qualifier" : {
            "topic" : "{{event.metadata.query._path}}",
            "qos" : 0,
            "namedRoot" : false,
            "retained" : false,
            "breakupArrays" : false
          },
          "qualifierExpression" : "",
          "writeReturn" : "ignore"
        },
        "outputs" : [ ]
      } ],
      "trackActivity" : false,
      "triggers" : [ {
        "name" : "oneSecond",
        "display" : {
          "position" : {
            "x" : -358,
            "y" : -2
          }
        },
        "config" : {
          "type" : ".TriggerPolled",
          "enabled" : true,
          "interval" : {
            "duration" : 1,
            "units" : "Seconds"
          }
        }
      } ],
      "errorHandler" : {
        "type" : "default"
      }
    } ],
    "tags" : [ ],
    "functions" : [ {
      "name" : "functions",
      "function" : "// This editor allows you to write JavaScript that\r\n// can be used across across all expressions.\r\n\r\n// Use console.log to output debug messages\r\n\r\nfunction getRandomInRange(min, max) {\r\n  return Math.random() * (max - min) + min;\r\n}\r\n\r\n// Create ramp from min -> max over an 8 hour shift\r\nfunction getRampValue(min, max, offset){\r\n  let shiftHours = Math.abs((new Date().getHours() - offset) % 8)\r\n  let shiftMinutes = new Date().getMinutes()\r\n  let totalMinutes = shiftHours * 60 + shiftMinutes\r\n\r\n  let minutesMax = 8 * 60\r\n  let minutesPerct = totalMinutes/minutesMax\r\n\r\n  return (minutesPerct * (max - min))\r\n}\r\n\r\n/*\r\nCode to simulate the crusher machine. Shift 2 increases the feed rate and causes issues.\r\nThe simulation is based on time. The data is generated for the time the function is called.\r\n*/\r\nconst CrusherSimulator = (() => {\r\n  function fluctuate(value, amount) {\r\n    return value + (Math.random() * amount * 2 - amount);\r\n  }\r\n\r\n  function rampedSineWave(baseValue, amplitude, frequency, time, rampRate) {\r\n    return baseValue + (time * rampRate) + amplitude * Math.sin(frequency * time) + fluctuate(0, 0.5);\r\n  }\r\n\r\n  function getNormalCrusherValues() {\r\n    return {\r\n      feedRate: fluctuate(8, 0.5),\r\n      vibration: fluctuate(29, 1),\r\n      temperature: fluctuate(87, 2),\r\n      power: fluctuate(69, 3),\r\n      crushRate: fluctuate(9, 0.2),\r\n      rpm: fluctuate(980, 5)\r\n    };\r\n  }\r\n\r\n  function getShiftTwoCrusherValues(secondsIntoShift) {\r\n    const feedRateBase = 12 + (secondsIntoShift / 28800) * 4; // Ramp feed rate from 12 to 16\r\n    const feedRate = fluctuate(feedRateBase, 0.5);\r\n    const vibration = rampedSineWave(40, 2, 0.05, secondsIntoShift / 60, 0.02);\r\n    const power = rampedSineWave(85, 5, 0.05, secondsIntoShift / 60, 0.03);\r\n    const temperature = fluctuate(95, 1);\r\n    const crushRateBase = 9 - (secondsIntoShift / 28800) * 1;\r\n    const crushRate = fluctuate(crushRateBase, 0.2);\r\n    const rpm = fluctuate(980, 5);\r\n\r\n    return { feedRate, vibration, temperature, power, crushRate, rpm };\r\n  }\r\n\r\n  function getErrorCrusherValues() {\r\n    return {\r\n      feedRate: fluctuate(16, 0.5),            // very high feed rate\r\n      vibration: fluctuate(60, 5),             // extremely high vibration\r\n      temperature: fluctuate(120, 3),          // overheat\r\n      power: fluctuate(95, 4),                 // higher power draw\r\n      crushRate: fluctuate(5, 0.2),            // low output\r\n      rpm: fluctuate(970, 3)                   // slight drop in RPM\r\n    };\r\n  }\r\n\r\n  function getShiftAndSecond(hour, minute, second) {\r\n    const shift = Math.floor(hour / 8) + 1;\r\n    const secondsWithinShift = ((hour % 8) * 3600) + (minute * 60) + second;\r\n    return { shift, secondsWithinShift };\r\n  }\r\n\r\n  function simulateCrusher(hour, minute, second, mode = \"auto\") {\r\n    const { shift, secondsWithinShift } = getShiftAndSecond(hour, minute, second);\r\n\r\n    let crusherValues;\r\n    if (mode === \"error\") {\r\n      crusherValues = getErrorCrusherValues();\r\n    } else if (mode === \"normal\") {\r\n      crusherValues = getNormalCrusherValues();\r\n    } else {\r\n      crusherValues = (shift === 2)\r\n        ? getShiftTwoCrusherValues(secondsWithinShift)\r\n        : getNormalCrusherValues();\r\n    }\r\n\r\n    const now = new Date();\r\n    const yesterday = new Date(now.getFullYear(), now.getMonth(), now.getDate() - 1);\r\n    const simulatedTime = new Date(yesterday.getFullYear(), yesterday.getMonth(), yesterday.getDate(), hour, minute, second);\r\n    const timestamp = Math.floor(simulatedTime.getTime() / 1000);\r\n\r\n    return {\r\n      timestamp,\r\n      shift,\r\n      feedRate: crusherValues.feedRate,\r\n      vibration: crusherValues.vibration,\r\n      temperature: crusherValues.temperature,\r\n      power: crusherValues.power,\r\n      crushRate: crusherValues.crushRate,\r\n      rpm: crusherValues.rpm\r\n    };\r\n  }\r\n\r\n  function simulateFullDayToCSV() {\r\n    const csvRows = [\r\n      \"_timestamp,shift,feedRate,vibration,temperature,powerKW,crushRate,rpm,_path\"\r\n    ];\r\n\r\n    const now = new Date();\r\n    const yesterday = new Date(now.setDate(now.getDate() - 1));\r\n    yesterday.setHours(0, 0, 0, 0);\r\n    const baseEpoch = yesterday.getTime();\r\n\r\n    for (let secondsIntoDay = 0; secondsIntoDay < 86400; secondsIntoDay++) {\r\n      const timestamp = baseEpoch + secondsIntoDay * 1000;\r\n      const hour = Math.floor(secondsIntoDay / 3600);\r\n      const minute = Math.floor((secondsIntoDay % 3600) / 60);\r\n      const second = secondsIntoDay % 60;\r\n\r\n      const data = simulateCrusher(hour, minute, second);\r\n      data.timestamp = timestamp;\r\n\r\n      const csvRow = `${data.timestamp},${data.shift},${data.feedRate},${data.vibration},${data.temperature},${data.power},${data.crushRate},${data.rpm},\"Portland/Line1\"`;\r\n      csvRows.push(csvRow);\r\n    }\r\n\r\n    const csvContent = csvRows.join(\"\\n\");\r\n    fs.writeFileSync(\"data/crusher_simulation_yesterday.csv\", csvContent, \"utf8\");\r\n    console.log(\"CSV file created for crusher simulation over a full day.\");\r\n  }\r\n\r\n  function simulateNow(mode = \"auto\") {\r\n    const now = new Date();\r\n    const hour = now.getHours();\r\n    const minute = now.getMinutes();\r\n    const second = now.getSeconds();\r\n\r\n    return simulateCrusher(hour, minute, second, mode);\r\n  }\r\n\r\n  return {\r\n    simulateFullDayToCSV,\r\n    simulateNow\r\n  };\r\n})();\r\n\r\n// PackerSimulator to encapsulate the packer simulation logic\r\nconst PackerSimulator = (() => {\r\n  // Function to reset packer state at the start of each shift\r\n  const resetPackerState = () => ({\r\n    fillWeight: 116,\r\n    bagsPerMinute: 3,\r\n    bagCount: 0,\r\n    packagingSupply: 2000,\r\n    goodSeals: 0,\r\n    badSeals: 0,\r\n    power: 58,\r\n    status: true\r\n  });\r\n\r\n  // Plant configurations for different fill weight targets and bag rates\r\n  const plants = {\r\n    highFill: { fillWeightTarget: 120, bagRate: 3, _path:  'Boston/Line1'},\r\n    lowFill: { fillWeightTarget: 112, bagRate: 4, _path:  'Albany/Line1' },\r\n    idealFill: { fillWeightTarget: 116, bagRate: 3, _path: 'Portland/Line1' }\r\n  };\r\n\r\n  // Store the state of each plant across shifts\r\n  let packerState = {\r\n    highFill: resetPackerState(),\r\n    lowFill: resetPackerState(),\r\n    idealFill: resetPackerState()\r\n  };\r\n\r\n  // Function to simulate the packer machine at a specific plant and specific minute of the day\r\n  function simulatePacker(plantName, hour, minute) {\r\n    // Determine the shift and minute within the shift\r\n    const { shift, minuteWithinShift } = getShiftAndMinute(hour, minute);\r\n\r\n    // Reset the packer state at the start of each shift\r\n    if (minute === 0 && hour % 8 === 0) {\r\n      packerState = {\r\n        highFill: resetPackerState(),\r\n        lowFill: resetPackerState(),\r\n        idealFill: resetPackerState()\r\n      };\r\n    }\r\n\r\n    const plantState = getPackerValues(plantName, minuteWithinShift);\r\n\r\n    // Calculate the epoch timestamp for the specific simulated time on yesterday's date\r\n    const now = new Date();\r\n    const yesterday = new Date(now.getFullYear(), now.getMonth(), now.getDate() - 1);\r\n    const simulatedTime = new Date(yesterday.getFullYear(), yesterday.getMonth(), yesterday.getDate(), hour, minute);\r\n    const timestamp = Math.floor(simulatedTime.getTime() / 1000); // Convert to epoch time in seconds\r\n\r\n    return {\r\n      timestamp,\r\n      shift,\r\n      plant: plantName,\r\n      fillWeight: plantState.fillWeight.toFixed(2),\r\n      bagsPerMinute: plantState.bagsPerMinute,\r\n      bagCount: plantState.bagCount,\r\n      goodSeals: plantState.goodSeals,\r\n      badSeals: plantState.badSeals,\r\n      power: plantState.power,\r\n      packagingSupply: plantState.packagingSupply,\r\n      status: plantState.status,\r\n\t  _path: plants[plantName]._path,\r\n    };\r\n  }\r\n\r\n  // Helper function to calculate shift and minute within the shift\r\n  function getShiftAndMinute(hour, minute) {\r\n    const shift = Math.floor(hour / 8) + 1; // 3 shifts per day (8 hours each)\r\n    const minuteWithinShift = (hour % 8) * 60 + minute;\r\n    return { shift, minuteWithinShift };\r\n  }\r\n\r\n  // Function to determine packer values based on the current plant and minute within shift\r\n  function getPackerValues(plantName, minutesIntoShift) {\r\n    const plantConfig = plants[plantName];\r\n\r\n    const fillWeight = plantConfig.fillWeightTarget\r\n    let bagsPerMinute = plantConfig.bagRate\r\n\r\n    // Round bags per minute to a whole number\r\n    bagsPerMinute = Math.round(bagsPerMinute);\r\n\r\n    // Define bad seal rates for each plant\r\n    let badSealRate = 0.01; // 1% for ideal fill weight\r\n    if (plantName === 'highFill') {\r\n      badSealRate = 0.20; // 20% for high fill weight\r\n    } else if (plantName === 'lowFill') {\r\n      badSealRate = 0.10; // 10% for low fill weight\r\n    }\r\n\r\n    // Calculate the number of bags produced this minute\r\n    const totalBagsThisMinute = Math.max(1, bagsPerMinute); // Ensure at least one bag is produced\r\n\r\n    // Update the state for bagCount and packagingSupply\r\n    packerState[plantName].bagCount += totalBagsThisMinute; // Increment by bags produced this minute\r\n    packerState[plantName].packagingSupply = Math.max(0, packerState[plantName].packagingSupply - totalBagsThisMinute); // Decrease packaging supply\r\n    packerState[plantName].badSeals = Math.floor(packerState[plantName].bagCount * badSealRate);\r\n\tpackerState[plantName].goodSeals = packerState[plantName].bagCount - packerState[plantName].badSeals\r\n\r\n    return {\r\n      fillWeight,\r\n      bagsPerMinute,\r\n      bagCount: packerState[plantName].bagCount,\r\n      goodSeals: packerState[plantName].goodSeals,\r\n      badSeals: packerState[plantName].badSeals,\r\n      power: packerState[plantName].power,\r\n      packagingSupply: packerState[plantName].packagingSupply,\r\n      status: packerState[plantName].status,\r\n    };\r\n  }\r\n\r\n  // Function to simulate data for a full day (all plants) and save it to CSV\r\n  function simulateFullDayToCSV() {\r\n    const csvRows = [\r\n      \"_timestamp,shift,plant,fillWeight,bagsPerMinute,bagCount,goodSeals,badSeals,power,packagingSupply,status,_path\" // CSV header\r\n    ];\r\n\r\n    // Set the base time as the start of \"yesterday\"\r\n    const now = new Date();\r\n    const yesterday = new Date(now.setDate(now.getDate() - 1));\r\n    yesterday.setHours(0, 0, 0, 0); // Set to 00:00:00 of the previous day\r\n    const baseEpoch = yesterday.getTime();\r\n\r\n    // Simulate data for a continuous 24-hour period, once per minute\r\n    for (let minutesIntoDay = 0; minutesIntoDay < 1440; minutesIntoDay++) {\r\n      const timestamp = baseEpoch + minutesIntoDay * 60 * 1000;\r\n      const hour = Math.floor(minutesIntoDay / 60);\r\n      const minute = minutesIntoDay % 60;\r\n\r\n      // Simulate data for each plant (highFill, lowFill, idealFill)\r\n      for (const plantName of Object.keys(plants)) {\r\n        const data = simulatePacker(plantName, hour, minute);\r\n        data.timestamp = timestamp;\r\n\r\n        // Format the data into CSV row format\r\n        const csvRow = `${data.timestamp},${data.shift},${data.plant},${data.fillWeight},${data.bagsPerMinute},${data.bagCount},${data.goodSeals},${data.badSeals},${data.power},${data.packagingSupply},${data.status},${data._path}`;\r\n        csvRows.push(csvRow);\r\n      }\r\n    }\r\n\r\n    // Join all rows by newline and write to file in the 'data' folder\r\n    const csvContent = csvRows.join(\"\\n\");\r\n    const outputPath = \"data/packer_simulation_yesterday.csv\";\r\n    fs.writeFileSync(outputPath, csvContent, \"utf8\");\r\n    console.log(\"CSV file created for packer simulation over a full day: \" + outputPath);\r\n  }\r\n  \r\n  // Simulate data for this point in time, on a simulated 3 day shift\r\n  function simulateNow(plantName) {\r\n    const now = new Date();\r\n    const hour = now.getHours();\r\n    const minute = now.getMinutes();\r\n\r\n    // Generate simulation for the current hour and minute\r\n    return (simulatePacker(plantName, hour, minute))\r\n  }\r\n\r\n  return {\r\n    simulateFullDayToCSV,\r\n\t  simulateNow\r\n  };\r\n})();\r\n"
    } ],
    "namespace" : [ {
      "id" : "7588e767-c643-4c7e-acfb-996f16b4224f",
      "name" : "Portland",
      "reference" : {
        "type" : "Empty",
        "name" : "",
        "params" : { },
        "path" : ""
      }
    }, {
      "id" : "0f700c3b-29e8-4528-a96f-da6ddb99af5f",
      "name" : "Line1",
      "parentNamespaceId" : "7588e767-c643-4c7e-acfb-996f16b4224f",
      "reference" : {
        "type" : "Empty",
        "name" : "",
        "params" : { },
        "path" : ""
      }
    }, {
      "id" : "f008a634-9082-4838-9bbc-702ebc3ea039",
      "name" : "crusher",
      "parentNamespaceId" : "0f700c3b-29e8-4528-a96f-da6ddb99af5f",
      "reference" : {
        "type" : "Instance",
        "name" : "crusher",
        "params" : { },
        "path" : ""
      }
    }, {
      "id" : "04738f24-684a-4d86-b3ca-71cf7223c09b",
      "name" : "drumDryer",
      "parentNamespaceId" : "0f700c3b-29e8-4528-a96f-da6ddb99af5f",
      "reference" : {
        "type" : "Instance",
        "name" : "drumDryer",
        "params" : { },
        "path" : ""
      }
    }, {
      "id" : "4b914c3f-46ea-4548-b226-27ceb9ebb989",
      "name" : "granulator",
      "parentNamespaceId" : "0f700c3b-29e8-4528-a96f-da6ddb99af5f",
      "reference" : {
        "type" : "Instance",
        "name" : "granulator",
        "params" : { },
        "path" : ""
      }
    }, {
      "id" : "a9fbd5f4-1ce5-4750-80f8-a8c9cc37a98c",
      "name" : "mixer",
      "parentNamespaceId" : "0f700c3b-29e8-4528-a96f-da6ddb99af5f",
      "reference" : {
        "type" : "Instance",
        "name" : "mixer",
        "params" : { },
        "path" : ""
      }
    }, {
      "id" : "c2b261aa-1c4d-4937-b3a1-bcbb73203ac0",
      "name" : "packer",
      "parentNamespaceId" : "0f700c3b-29e8-4528-a96f-da6ddb99af5f",
      "reference" : {
        "type" : "Instance",
        "name" : "packer",
        "params" : { },
        "path" : ""
      }
    } ]
  },
  "system" : {
    "version" : 0,
    "variables" : [ ],
    "secrets" : [ ],
    "settings" : {
      "version" : 0,
      "directories" : { },
      "api" : {
        "sessionTimeout" : {
          "duration" : 8,
          "units" : "Hours"
        }
      },
      "configuration" : {
        "scheme" : "http",
        "port" : 45245,
        "centralConfig" : false,
        "autoSaveIntervalSeconds" : 60,
        "backupCopies" : 50
      },
      "hbMqttBroker" : {
        "enabled" : true,
        "allowAnonymous" : true,
        "endpoints" : [ {
          "hostname" : "0.0.0.0",
          "port" : 1885,
          "useSSL" : false,
          "certificateKeyAlias" : "",
          "protocol" : "mqtt.tcp"
        }, {
          "hostname" : "0.0.0.0",
          "port" : 1886,
          "useSSL" : false,
          "certificateKeyAlias" : "",
          "protocol" : "mqtt.ws"
        } ]
      },
      "restDataServer" : {
        "enabled" : true,
        "hostname" : "0.0.0.0",
        "port" : 8885,
        "useHttps" : false,
        "schemeCertificate" : "",
        "allowAnonymous" : false,
        "authenticationModes" : [ "API_KEY" ],
        "mcpServerEnabled" : true,
        "mcpServerPort" : 45345
      },
      "log" : {
        "debugLogging" : "NONE",
        "fileSizeMB" : 100,
        "logAuditEvents" : false
      },
      "redundancy" : {
        "backup" : {
          "enabled" : false,
          "primary" : {
            "uri" : "",
            "pingIntervalSeconds" : 10,
            "pingAttempts" : 1
          }
        }
      },
      "expressionEngine" : {
        "allowExpressionEval" : false,
        "allowEnvironmentVariables" : false,
        "expressionEngineTimeoutSeconds" : 10,
        "hubBindingName" : "hub",
        "allowExpressionImports" : false
      }
    }
  }
}
